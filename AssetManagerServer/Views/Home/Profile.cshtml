@using System.Data.Entity
@using AssetManagerServer.Models
@model dynamic

@{
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<!DOCTYPE html>

<html>
<body>
@{
    var sort = ViewBag.Sort;
    var asc = ViewBag.Asc;

    var operations = (ViewBag.Operations as DbSet<Operation>)?.ToList();
    var brokers = (ViewBag.Brokers as DbSet<Broker>)?.ToList();
    var assetAnalytics = (ViewBag.AssetAnalytics as DbSet<AssetAnalytic>)?.ToList();

    if (operations == null || brokers == null || assetAnalytics == null)
    {
        throw new NullReferenceException("При конвертации один из списков данных оказался NULL");
    }

    var curUserId = int.Parse(Session["userId"].ToString());
    var operationsCurrentUser = operations.Where(o => o.UserId == curUserId);
    var operationGroups = operationsCurrentUser.GroupBy(operation =>
        (operation.AssetName, operation.AssetTicker, operation.AssetType)).ToList();
    
    var portfolio = operationGroups.Select(g => new
    {
        AssetName = g.Key.Item1, AssetTicker = g.Key.Item2, AssetType = g.Key.Item3,
        BrokerName = brokers.FirstOrDefault(broker => broker.Id == g.FirstOrDefault()?.BrokerId)?.Name,
        Count = g.Sum(o => o.Type),
        BuyRate = assetAnalytics.FirstOrDefault(analytic => analytic.Id == g.First().AssetAnalyticId)?.BuyRate,
        SellRate = assetAnalytics.FirstOrDefault(analytic => analytic.Id == g.First().AssetAnalyticId)?.SellRate,
        Id = g.FirstOrDefault()?.Id
    });

    switch (sort)
    {
        case 0:
            portfolio = asc ? portfolio.OrderBy(x => x.AssetName) : portfolio.OrderByDescending(x => x.AssetName);
            break;
        case 1:
            portfolio = asc ? portfolio.OrderBy(x => x.AssetTicker) : portfolio.OrderByDescending(x => x.AssetTicker);
            break;
        case 2:
            portfolio = asc ? portfolio.OrderBy(x => x.AssetType) : portfolio.OrderByDescending(x => x.AssetType);
            break;
        case 3:
            portfolio = asc ? portfolio.OrderBy(x => x.BrokerName) : portfolio.OrderByDescending(x => x.BrokerName);
            break;
        case 4:
            portfolio = asc ? portfolio.OrderBy(x => x.Count) : portfolio.OrderByDescending(x => x.Count);
            break;
        case 5:
            portfolio = asc ? portfolio.OrderBy(x => x.BuyRate) : portfolio.OrderByDescending(x => x.BuyRate);
            break;
        case 6:
            portfolio = asc ? portfolio.OrderBy(x => x.SellRate) : portfolio.OrderByDescending(x => x.SellRate);
            break;
    }
}
<div>
    <table class="pure-table pure-table-bordered" id="screenCenter">
        <tr>
            <th><a href="/Home/Profile?sort=0&asc=@((!asc).ToString())">Актив</a></th>
            <th><a href="/Home/Profile?sort=1&asc=@((!asc).ToString())">Тикер актива</a></th>
            <th><a href="/Home/Profile?sort=2&asc=@((!asc).ToString())">Тип актива</a></th>
            <th><a href="/Home/Profile?sort=3&asc=@((!asc).ToString())">Брокер]</a></th>
            <th><a href="/Home/Profile?sort=4&asc=@((!asc).ToString())">Кол-во активов</a></th>
            <th><a href="/Home/Profile?sort=5&asc=@((!asc).ToString())">Привлекательность покупки</a></th>
            <th><a href="/Home/Profile?sort=6&asc=@((!asc).ToString())">Привлекательность продажи</a></th>
            <th></th>
            <th></th>
        </tr>
        @foreach (var element in portfolio)
        {
            <tr>
                <td>@element.AssetName</td>
                <td>@element.AssetTicker</td>
                <td>@element.AssetType</td>
                <td>@element.BrokerName</td>
                <td>@element.Count</td>
                <td>@(element.BuyRate == null ? "Неизвестно" : element.BuyRate.ToString())</td>
                <td>@(element.SellRate == null ? "Неизвестно" : element.SellRate.ToString())</td>
                <td><a href="/Home/AddAsset?operationId=@element.Id">Купить</a></td>
                <td><a href="/Home/DeleteAsset?operationId=@element.Id">Продать</a></td>
            </tr>
        }
    </table>
</div>
</body>
</html>